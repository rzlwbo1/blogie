@using Microsoft.AspNetCore.Identity;
@inject SignInManager<IdentityUser> signInManager;
@inject UserManager<IdentityUser> userManager;

@model Bloggie.Web.Models.ViewModel.BlogDetailsViewModel;
@{
    ViewData["Title"] = Model.PageTitle;
}


<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-sm-12 col-lg-6">

            @if (Model != null)
            {
                <h2 class="mb-3">@Model.Heading</h2>
                <div class="d-flex justify-content-between">
                    <h6 class="text-secondary">@Model.Author</h6>
                    <p class="text-secondary">@Model.PublishDate.ToShortDateString()</p>
                </div>

                <div class="mb-3 d-flex">

                    @if (signInManager.IsSignedIn(User))
                    {

                        if (Model.Liked)
                        {
                            <a style="cursor: pointer;">
                                <img src="~/icons/heart-fill.svg" class="img-fluid" />
                            </a>
                        } else
                        {
                            <a id="btnLike" style="cursor: pointer;">
                                <img src="~/icons/heart.svg" class="img-fluid" />
                            </a>
                        }

                    }

                    &nbsp; <span class="text-secondary" id="totalLikes"> @Model.TotalLikes Likes</span>
                </div>

                <div class="mb-3 d-flex gap-2">
                    @foreach (var tag in @Model.Tags)
                    {
                        <span class="badge rounded-pill bg-secondary">@tag.DisplayName</span>
                    }
                </div>

                <img class="d-block img-fluid mb-3" alt="images" src="@Model.FeaturedImageUrl"/>
                <div class="mb-3 blog-details-content">
                    @Html.Raw(Model.Content);
                </div>


            } else
            {
                <h4>Blog Not Found!</h4>
            }

        </div>
    </div>
</div>

@section Scripts {
    <script>
        const btnLikeElem = document.getElementById("btnLike");
        const totalLikeElem = document.getElementById("totalLikes");

        let reqBody = {
            BlogPostId: '@Model.Id',
            UserId: '@userManager.GetUserId(User)'
        }


        async function getTotalLikes() {
            fetch("/api/BLogPostLike/@Model.Id/totalLikes", {
                method: "GET",
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                }
            })
            .then(data => data.json())
            .then(res => totalLikeElem.textContent = res + " Likes")
        }



        async function addLikeBlog() {
            fetch("/api/BLogPostLike/Add", {
                method: "POST",
                headers : {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify(reqBody)
            })
            .then(res => {
                btnLikeElem.children[0].src = "/icons/heart-fill.svg";
                btnLikeElem.removeEventListener("click", addLikeBlog);

                getTotalLikes();
            })
            .catch(err => console.log(err.message))
        }

        if(btnLikeElem) {
            btnLikeElem.addEventListener("click", addLikeBlog);
        } 
    </script>
}
